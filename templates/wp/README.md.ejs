# <%- name %>

Container based WordPress project. Design to avoid copy-paste and "in my local work".

## Configuration
**Early NOTE for Windows users**: There is a PowerShell script that do the same of the Bash Script. Just replace the name of `<%- name %>.sh` to `<%- name %>.ps1`. Remember to adjust your `ExecutionPolicy` (`Set-ExecutionPolicy -ExecutionPolicy RemoteSigned` should be fine) and run as Administrator. The Docker setup runs well with WSL2.

To bootstrap the project follow:

1. Copy and paste `.env.example` to `.env` (NO rename or delete. This file is tracked in git)

2. Fill the `.env` file

3. With docker:
  * `# ./<%- name %>.sh addrecords`
  * `# docker-compose up -d`

There is an alternative without docker. Check it out below.

## Development

Following services are running:
* [WordPress](https://wordpress.org/)
* [MySQL](https://www.mysql.com/)
* [NGINX](https://github.com/nginx-proxy/nginx-proxy)
* [MailHog](https://github.com/mailhog/MailHog)
* [Adminer](https://www.adminer.org/)

Following virtual hosts are used:
* `<%- name %>.local` for WordPress service
* `db.<%- name %>.local` for Adminer service
* `mail.<%- name %>.local` for MailHog service (Web UI)

Following ports are open:
* `80` for NGINX service

Due that this configuration use Virtual Host via NGINX reverse proxy, all of the above mentioned virtual hosts **MUST** be added to `/etc/hosts` file under Linux or `C:\Windows\System32\drivers\etc` for Windows. All virtual host **MUST** point to `localhost` or `127.0.0.1` Something like this line:

`127.0.0.1 <%- name %>.local mail.<%- name %>.local db.<%- name %>.local`

For this, you can use `# ./<%- name %>.sh addrecords` script. Note this **MUST** be run with sudo.

You can run the project with with the standard command `docker-compose up -d`.

## Notes for those that don't (or can't) use Docker

If you don't have any WordPress installed, you can use `# ./<%- name %>.sh installwpcore`. This will install the last WordPress version without the `wp-content` folder (ideally for the previous step) into a new folder called `wp` (this is actually ignored in git).

Now, yo need to copy and paste (no rename since this file is tracked in git) the file `local-config-sample.php` to `local-config.php`. Then, please, replace salts constants and fill DB constants with your MySQL/MariaDB service host, port, user and password. Yoy may change `$table_prefix` if apply.

Ensure to have enable `mysqli` on your `php.ini` file.

Next, you can use the bulit-in PHP webserver using `# ./<%- name %>.sh server`. This will launch a webserver running the project in `localhost:8080`.

Please, take in mind that using this way the Database service (MySQL or MariaDB) **runs by your own**.

For this way, you will need [PHP](https://www.php.net/) and [WP-CLI](https://wp-cli.org/) installed in your system and register in your `$PATH`.

### NOTES

* First start can be take a while to be done. This is due to MySQL service initialization. You can check te process with `# docker-compose logs --follow` command.
* Due to before said, WordPress won't run until MySQL finish their initialization.
* MySQL root password is random. It only can be taken in initialization process if you see the logs. The root password will be echoed like this: `GENERATED ROOT PASSWORD: xxxxx`.
* Please, don't open random ports unless you have a good reason to. Virtual Hosts are less painful to configure.
* To WordPress Multisite see [WordPress Docker](https://hub.docker.com/_/wordpress/) `WORDPRESS_CONFIG_EXTRA` environment variable and edit `docker-compose.yaml` if apply.
* All files under the `wp-content` folder are (and *must* be) owned by `http` user (uid: 33 and guid: 33). If this change, permisology problems will appear. To avoid change tis, you can use [ACL](https://wiki.archlinux.org/index.php/Access_Control_Lists) to change folder permissions: `# setfacl -R -m "u:user:rwx" wp-content/` where `user` is your username. This command must be run with sudo.

## DISCLAIMER

This configuration is only available for developing and testing environments. Please, **DON'T** use in production. You get advised.